{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \

\b HeliospectraSTSdaemon
\b0 \
Kirk Clendinning 20150204\
\
Using the SeaBreeze API from Ocean Optics, a daemon for Linux based systems was written to allow an STS spectrometer, which has a serial and USB interface, to be controlled from a Raspberry Pi. Unfortunately, the shutter feature was not implemented on the STS, as planned by Ocean Optics, so detector temperature was implemented so that it could be monitored to compensate for possible base line drift of the CCD. The SeaBreeze API was modified to allow reading temperature and other features useful for remote control.\
\

\b Usage
\b0 \
In order to use the heliospectraSTSdaemon, the SeaBreeze directory, containing the open source code for the SeaBreeze API and code for the heliospectra daemon, should be compiled on, or cross compiled for, the target system. \
\
Use \'91make distclean\'92 in the 
\i seabreeze
\i0  directory, to strip the build of everything but source.\
Use \'91make clean\'92 to recompile the entire target.\
Use \'91make\'92 in the top directory to produce the libseabreeze library, found in 
\i lib
\i0 , the heliospectra daemon, found in 
\i heliospectra
\i0  and test code for seabreeze api calls, found in 
\i test
\i0 .\
\
The libseabreeze library should be installed as is typical of the target OS. The heliospectraSTSdaemon should be installed on the target OS and registered with the appropriate background task manager so that it says running and automatically launches.\
\

\b heliospectraSTSdaemon
\b0 \
To connect to the daemon, open a socket (or telnet) to port 54545 of the target system. Once connected, sending a \'91?\'92 will result in the following help text:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\fs20 \cf0 \CocoaLigature0 ? - returns: a list of all the recognized commands, <crlf> OK\
x - exits the event loop so that the daemon stops, the OS restarts it, returns: OK\
q - quit, exits the event loop so that the daemon stops, returns: OK\
t - take spectrum, when done, returns: <crlf> OK\
    t 0 for the raw dark reference spectrum\
    t 1 for the raw sample spectrum\
    t 2 for the formatted dark reference spectrum\
    t 3 for the formatted sample spectrum\
s - send spectrum, returns: a long list of tab separated values <crlf> OK\
    spectrums return tab separated wavelength and spectrometer count values\
     formatted spectrums are automatically offset for short term temperature drift\
    absolute irradiance returns tab separated wavelength and irradiance\
    s 0 for the raw dark reference spectrum\
    s 1 for the raw sample spectrum\
    s 2 for the formatted dark reference spectrum\
    s 3 for the formatted sample spectrum\
    s 4 for the raw absolute irradiance flux uW/cm2/nm\
    s 5 for the raw absolute irradiance umol q/cm2/s/nm\
    s 6 for the formatted absolute irradiance flux uW/cm2/nm\
    s 7 for the formatted absolute irradiance umol q/cm2/s/nm\
    s 8 for the wavelength table\
    s 9 for the calibration table\
i - integration time setting in milliseconds, returns: OK\
    i time_ms, ex: s 4000\
b - boxcar filter width and scans to average, returns: OK\
    b boxcarFilterWidth, scansToAverage ex: b 10 5 (boxcar filter is 0-15, scans to average 1-5000)\
a - add waveband, returns: OK\
    a lowWavelength highWavelength, ex: a 400 700\
r - remove waveband, returns: OK\
    r wavebandIndex, ex: r 2\
l - list wavebands, returns: tab separated wavebands with indexes, low and high wavelengths <crlf> OK\
    for example: 1<tab>400<tab>700<crlf>2<tab>500<tab>600<crlf>, etc. <crlf> OK)\
d - detector temperature, returns: temperature centigrade <crlf> OK\
w - waveband irradiance, returns: absolute irradiance for each waveband, tab delimited values, <crlf> OK\
    ex: wavebandIndex <tab> irradiance <tab> wavebandIndex <space> irradiance<crlf>\
    w 0 for raw spectral wavebands, uW/cm2\
    w 1 for raw spectral wavebands, umol/cm2/s\
    w 2 for formatted spectral wavebands, uW/cm2\
    w 3 for formatted spectral wavebands, umol/cm2/s\
    w 4 for uncorrected spectra wavebands, uW/cm2, umol/m2/s\
    w 5 for corrected spectra wavebands, uW/cm2, umol/m2/s\
g - get values from STS, returns: value <crlf> OK\
    g 0 get serial number\
    g 1 get optical bench description\
    g 2 get CPU temperature, in degrees C\
    g 3 get boxcar filter width\
    g 4 get the number of scans to average\
    g 5 get integration time in milliseconds\
    g 6 get integration time in microseconds
\f0\fs24 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
A typical sequence for running the spectrometer would be:\
?			to receive the command list\
b 10 1		to set the boxcar filter width to 10 and the scans to average to 1\
i 4000		to set the integration time of the spectrometer to 4000ms \
d			to get the detector\'92s temperature\
a 400 700		to set a waveband from 400 to 700nm\
a 400 500\
a 500 600\
a 600 700\
a 700 800\
r 0			to remove the default waveband, which is the total range of the spectrometer\
\
Cover the spectrometer optical port, or darken the test chamber\
t 0			to take an uncorrected dark reference spectrum\
t 1			to take an uncorrected spectrum\
w 1			to read the irradiance for each of the wavebands listed above\
\
\
\
}